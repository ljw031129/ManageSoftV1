@{
    ViewBag.Title = "轨迹回放";
    Layout = "~/Views/Shared/_LayoutSmartAdmin.cshtml";
}
@section styles{
    <link href="~/Content/assets/stylesheets/plugins/bootstrap_daterangepicker/bootstrap-daterangepicker.css" rel="stylesheet" />
    <link href="~/Content/assets/stylesheets/plugins/csspinner/csspinner.css" rel="stylesheet" />
    <link href="~/Scripts/plugins/artDialog/css/ui-dialog.css" rel="stylesheet" />
}
<!-- row -->
<div class="row">

    <!-- col -->
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="collapse navbar-collapse bg-color-white">
            @Html.Partial("_PartialSmartAdminTENav")
        </div>
    </div>
    <!-- end col -->
    <!-- right side of the page with the sparkline graphs -->
</div>
<!-- end row -->
<!--
    The ID "widget-grid" will start to initialize all widgets below
    You do not need to use widgets if you dont want to. Simply remove
    the <section></section> and you can use wells or panels instead
    -->
<!-- widget grid -->
<section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-0" data-widget-editbutton="false">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"
                -->
                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>行驶轨迹 终端编号 @ViewBag.DevId</h2>
                </header>
                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body  no-padding">
                        <div class="widget-body-toolbar">
                            <ul class="list-inline ">
                                <li class="text-success ">
                                    <i class=" icon-time  "></i>
                                    选择时间范围：
                                </li>
                                <li class="text-success ">
                                    <div class='btn-group'>
                                        <a class="btn btn-white" id="daterange" href="#">
                                            <i class='icon-calendar'></i>
                                            <span>选择时间</span>
                                            <b class='caret'></b>
                                        </a>

                                    </div>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" class="btn btn-default" rel="tooltip" data-placement="top" data-original-title="加载数据" onclick="InitMarkerMovingControl()"><i class="fa fa-arrow-down"></i> 加载数据</a>

                                </li>
                                <li>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-default" onclick="startAnimation()">
                                            <i class="fa  fa-play-circle"></i>
                                        </button>
                                        <button type="button" class="btn btn-default" onclick="pauseAnimation()">
                                            <i class="fa fa-pause"></i>
                                        </button>
                                        <button type="button" class="btn btn-default" onclick="continueAnimation()">
                                            <i class="fa fa-play"></i>
                                        </button>
                                    </div>
                                </li>
                                <li class="text-success">播放速度：<input type="text" id="amount" readonly style="border:0; color:#f6931f; font-weight:bold; width:80px;"></li>
                                <li style="width:200px;">
                                    <div class="well well-sm well-light">
                                        <div id="slider-range-min"></div>
                                    </div>
                                </li>
                            </ul>
                            <form class="form-inline" role="form">

                                <fieldset>
                                    <div class="form-group">
                                        <label>是否过滤漂移点：</label>                                       
                                        <span class="onoffswitch ">
                                            <input type="checkbox" name="start_interval" class="onoffswitch-checkbox" id="start_interval">
                                            <label class="onoffswitch-label" for="start_interval">
                                                <span class="onoffswitch-inner" data-swchon-text="ON" data-swchoff-text="OFF"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </span>
                                    </div>
                                    <div class="form-group">
                                        <label>漂移点有效距离：</label>
                                        <div class="input-group">
                                            <input class="form-control" id="append" type="text">
                                            <span class="input-group-addon">千米/小时</span>
                                        </div>
                                    </div> 
                                    <div class="form-group">
                                        <label>是否合并停留点：</label>
                                        <span class="onoffswitch ">
                                            <input type="checkbox" name="start_interval" class="onoffswitch-checkbox" id="start_interval">
                                            <label class="onoffswitch-label" for="start_interval">
                                                <span class="onoffswitch-inner" data-swchon-text="ON" data-swchoff-text="OFF"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </span>
                                    </div>
                                    <div class="form-group">
                                        <label>合并最大距离：</label>
                                        <div class="input-group">
                                            <input class="form-control" id="append" type="text">
                                            <span class="input-group-addon">千米/小时</span>
                                        </div>
                                    </div>                                
                                </fieldset>
                            </form>                           
                        </div>
                        <div id="iCenter"></div>
                        <div class="widget-footer">

                            <button class="btn btn-sm btn-primary" type="button">
                                Save
                            </button>

                            <button class="btn btn-sm btn-danger disabled pull-left" type="button">
                                Delete
                            </button>

                        </div>
                    </div>
                    <!-- end widget content -->
                </div>
                <!-- end widget div -->
            </div>
            <!-- end widget -->
        </article>
    </div>

    <!-- end row -->
</section>
<!-- end widget grid -->
@section scripts{
    <script src="~/Scripts/json3.js"></script>
    <script src="~/Content/assets/javascripts/plugins/common/moment.min.js"></script>
    <script src="~/Content/assets/javascripts/plugins/bootstrap_daterangepicker/bootstrap-daterangepicker.js"></script>
    <script language="javascript" src="http://webapi.amap.com/maps?v=1.2&key=990f8ec17963b0c7a507f9c74d275568"></script>
    <script src="~/Scripts/plugins/artDialog/dist/dialog-plus.js"></script>
    <script language="javascript">
        var mapObj, marker, markerMovingControl, polyline;
        var rangeTime = "";
        var IsEnd = false;
        var jsonResult;
        $(document).ready(function () {
            pageSetUp();
            $("#daterange").daterangepicker({
                timePicker: true, timePickerIncrement: 30, format: 'MM/DD/YYYY h:mm ',
                ranges: {
                    "昨天": [moment().subtract("days", 1), moment().subtract("days", 1)],
                    '今天': [moment(), moment()],
                    '最近7天': [moment().subtract('days', 6), moment()],
                    "最近30天": [moment().subtract("days", 29), moment()],
                    "本月": [moment().startOf("month"), moment().endOf("month")]
                },
                startDate: moment().subtract("days", 29),
                endDate: moment(),
                opens: "left",
                cancelClass: "btn-danger",
                buttonClasses: ['btn', 'btn-sm']
            }, function (start, end) {
                rangeTime = start.format("YYYY-MM-DD h:mm") + " $ " + end.format("YYYY-MM-DD h:mm");
                return $("#daterange span").html(start.format("YYYY/MM/DD h:mm") + " - " + end.format("YYYY/MM/DD h:mm"));
            });
            mapInit();
            $("#slider-range-min").slider({
                range: "min",
                value: 37,
                step: 50,
                min: 0,
                max: 700,
                slide: function (event, ui) {
                    $("#amount").val(ui.value + "千米/小时");
                    markerMovingControl.setSpeed(ui.value);
                }
            });
            //$("#amount").text($("#slider-range-min").slider("value") + "千米/小时");
        });
        /* live switch */
        $('input[type="checkbox"]#start_interval').click(function () {
            if ($(this).prop('checked')) {
                // $on = true;
                // updateInterval = 1500;
                //  update();
            } else {
                // clearInterval(updateInterval);
                // $on = false;
            }
        });
        //初始化地图对象，加载地图
        function mapInit() {
            mapObj = new AMap.Map("iCenter", {
                //二维地图显示视口
                //view: new AMap.View2D({
                //    center: new AMap.LngLat(lngX, latY)//,//地图中心点
                //    // zoom: 8 //地图显示的缩放级别
                //}),
                //continuousZoomEnable: false
            });
            //  AMap.event.addListener(mapObj, "complete", completeEventHandler);
        }
        /**     第一部分，动画暂停、继续的实现     */

        /**
       * Marker移动控件
       * param {Map} map    地图对象
       * param {Marker} marker Marker对象
       * param {Array} path   移动的路径，以坐标数组表示
       */
        var MarkerMovingControl = function (map, marker) {
            this._map = map;
            this._marker = marker;
            //初始化path为空
            this._path = [];
            this._currentIndex = 0;
            this._speed = 100;
            this._pageSize = 100;
            this._pageNum = 1;
            this._isEnd = false;
        }

        /**
         * 移动marker，会从当前位置开始向前移动
         */
        MarkerMovingControl.prototype.move = function () {
            if (!this._listenToStepend) {
                this._listenToStepend = AMap.event.addListener(this, 'stepend', function () {
                    this.step();
                }, this);
            }
            this.step();
        };

        /**
         * 停止移动marker，由于控件会记录当前位置，所以相当于暂停
         */
        MarkerMovingControl.prototype.stop = function () {
            this._marker.stopMove();
        };

        /**
         * 重新开始，会把marker移动到路径的起点然后开始移动
         */
        MarkerMovingControl.prototype.restart = function () {
            this._path = [];
            this._speed = 100;
            this._pageSize = 100;
            this._pageNum = 1;
            this._isEnd = false;
            this.stop();
            mapObj.clearMap();
            // this.stop();
        };

        /**
         * 向前移动一步
         */
        MarkerMovingControl.prototype.step = function () {
            if (this._path.length == 1 && !this._isEnd) {
                this.updateNextPageNum();
                load();
            } else {
                if (!this._listenToMoveend) {
                    //点标记执行moveTo动画结束时触发事件
                    this._listenToMoveend = AMap.event.addListener(this._marker, 'moveend', function () {

                        this._path.splice(0, 1);
                        //触发指定事件。
                        AMap.event.trigger(this, 'stepend');
                    }, this);
                }
                if (this._path.length == 1) {
                    var d = dialog({
                        title: '提示',
                        content: '轨迹播放完毕！'
                    });
                    d.show();
                } else {
                    // new AMap.LngLat(lngX, latY)
                    //this._path[0]
                    //element["GpsPlog"], element["GpsPlat"]
                    //设置中心点
                    mapObj.setZoomAndCenter(14, new AMap.LngLat(this._path[0].GpsPlog, this._path[0].GpsPlat));
                    //添加停留点

                    var distance = getFlatternDistance(parseFloat(this._path[0].GpsPlog), parseFloat(this._path[0].GpsPlat), parseFloat(this._path[1].GpsPlog), parseFloat(this._path[1].GpsPlat));
                    addMarker(this._path[0], distance);
                    //移动到下一点
                    this._marker.moveTo(new AMap.LngLat(this._path[1].GpsPlog, this._path[1].GpsPlat), this._speed);
                }
            }
        };
        //调整播放速度
        MarkerMovingControl.prototype.setSpeed = function (value) {
            this._speed = value;
        };
        //更新path数据
        MarkerMovingControl.prototype.updatePath = function (value) {
            //连接两个数组
            this._path = this._path.concat(value);
        };
        //更新pageNum
        MarkerMovingControl.prototype.updateNextPageNum = function () {
            this._pageNum = this._pageNum + 1;
        };
        //得到当前pageNum
        MarkerMovingControl.prototype.getPageNum = function () {
            return this._pageNum;
        };
        //得到当前pageSize
        MarkerMovingControl.prototype.getPageSize = function () {
            return this._pageSize;
        };
        //得到当前path
        MarkerMovingControl.prototype.getPath = function () {
            return this._path;
        };
        //设置IsEnd
        MarkerMovingControl.prototype.setIsEnd = function (value) {
            this._isEnd = value;
        };
        //得到当前IsEnd
        MarkerMovingControl.prototype.getIsEnd = function () {
            return this._isEnd;
        };
        //设置标记起始点mark
        MarkerMovingControl.prototype.setMarkPosition = function (element) {
            this._marker.setPosition(new AMap.LngLat(element.GpsPlog, element.GpsPlat));
        };
        //设置标记停留点标记
        MarkerMovingControl.prototype.seStopMarker = function (postion) {
            this._marker.setPosition(postion);
        };
        /**     第二部分，应用示例     */

        // 编写事件响应函数
        function startAnimation() {
            markerMovingControl.restart();
        }

        function pauseAnimation() {
            markerMovingControl.stop();
        }

        function continueAnimation() {
            markerMovingControl.move();
        }
        function addMarker(path, distance) {
            var stopMarker = new AMap.Marker({
                icon: "../../Content/ICON/a.ico",
                offset: new AMap.Pixel(-8, -10), //相对于基点的位置
                zIndex: 90,
                // shadow:'',
                position: new AMap.LngLat(path.GpsPlog, path.GpsPlat)
            });
            stopMarker.setMap(mapObj);  //在地图上添加点
            // stopMarker.setTitle('我是地图中心点哦~<br>sss'); //设置鼠标划过点标记显示的文字提示
            //stopMarker.setContent("<b>body</b>");
            AMap.event.addListener(stopMarker, 'click', function () { //鼠标点击marker弹出自定义的信息窗体
                var infoBody = "<p>" + path.ReceiveTime + "</p><p>" + path.GpsPos + "</p><p>" + distance + "</p>";
                infoWindow.setContent(createInfoWindow('定位信息&nbsp;&nbsp;<span style="font-size:11px;color:#F00;">' + path.GpsPlog + ',' + path.GpsPlat + '</span>', infoBody));
                infoWindow.open(mapObj, stopMarker.getPosition());
            });
        }
        //实例化信息窗体
        var infoWindow = new AMap.InfoWindow({
            isCustom: true,  //使用自定义窗体
            content: createInfoWindow('定位信息&nbsp;&nbsp;<span style="font-size:11px;color:#F00;">价格:318</span>', "<img src='http://tpc.googlesyndication.com/simgad/5843493769827749134' style='position:relative;float:left;margin:0 5px 5px 0;'>地址：北京市朝阳区阜通东大街6号院3号楼 东北 8.3 公里<br/>电话：010 64733333<br/><a href='http://baike.baidu.com/view/6748574.htm'>详细信息</a>"),
            offset: new AMap.Pixel(16, -45)//-113, -140
        });

        //构建自定义信息窗体
        function createInfoWindow(title, content) {
            var info = document.createElement("div");
            info.className = "info";

            //可以通过下面的方式修改自定义窗体的宽高
            //info.style.width = "400px";

            // 定义顶部标题
            var top = document.createElement("div");
            top.className = "info-top";
            var titleD = document.createElement("div");
            titleD.innerHTML = title;
            var closeX = document.createElement("img");
            closeX.src = "http://webapi.amap.com/images/close2.gif";
            closeX.onclick = closeInfoWindow;

            top.appendChild(titleD);
            top.appendChild(closeX);
            info.appendChild(top);


            // 定义中部内容
            var middle = document.createElement("div");
            middle.className = "info-middle";
            middle.style.backgroundColor = 'white';
            middle.innerHTML = content;
            info.appendChild(middle);

            // 定义底部内容
            var bottom = document.createElement("div");
            bottom.className = "info-bottom";
            bottom.style.position = 'relative';
            bottom.style.top = '0px';
            bottom.style.margin = '0 auto';
            var sharp = document.createElement("img");
            sharp.src = "http://webapi.amap.com/images/sharp.png";
            bottom.appendChild(sharp);
            info.appendChild(bottom);
            return info;
        }

        //关闭信息窗体
        function closeInfoWindow() {
            mapObj.clearInfoWindow();
        }

        //编辑折线
        function addLine(arr) {
            //定义折线对象
            polyline = new AMap.Polyline({
                map: mapObj,
                path: arr,
                strokeColor: "#F00", //线颜色
                strokeOpacity: 0.4, //线透明度
                strokeWeight: 3, //线宽
                strokeStyle: "dashed", //线样式
                strokeDasharray: [10, 5] //补充线样式
            });
            mapObj.setFitView();
            //构造折线编辑对象，并开启折线的编辑状态
        }
        function InitMarkerMovingControl() {
            marker = new AMap.Marker({
                map: mapObj,
                //draggable:true, //是否可拖动
                // position: new AMap.LngLat(lngX, latY),//基点位置
                icon: "../../Content/ICON/car_03.png", //marker图标，直接传递地址url
                offset: new AMap.Pixel(-26, -13), //相对于基点的位置
                zIndex: 120,
                //是否自动旋转。点标记在使用moveAlong动画时，路径方向若有变化，点标记是否自动调整角度，默认为false
                autoRotation: true
            });
            //根据地图上添加的覆盖物分布情况，缩放平移地图到合适的视野级别，参数overlayList默认为当前地图上添加的所有覆盖物图层
            //mapObj.setFitView();
            markerMovingControl = new MarkerMovingControl(mapObj, marker);
            //加载数据
            load();
        }
        function load() {
            var arr = [];
            var devid = "@ViewBag.DevId";
            //加载过程中地图添加csspinner
            $("#iCenter").addClass("csspinner ringed");
            $.get("@Url.Action("GetReceiveDataMap", "ReceiveData")",
               { devId: devid, dateRange: rangeTime, pageNum: markerMovingControl.getPageNum(), pageSize: markerMovingControl.getPageSize() }, function (result) {
                   if (result.total == 0) {
                       $("#iCenter").removeClass("csspinner ringed");
                       var d = dialog({
                           title: '提示',
                           content: '该时间段内无运行轨迹！'
                       });
                       d.show();
                   } else {
                       $.each(result.rows, function (index, element) {
                           arr.push(new AMap.LngLat(element["GpsPlog"], element["GpsPlat"]));
                       });
                       //更新path数据
                       markerMovingControl.updatePath(result.rows);
                       addLine(arr);
                       markerMovingControl.setMarkPosition(markerMovingControl.getPath()[0]);
                       // console.log("总数" + result.total + "当前页：" + markerMovingControl.getPageNum());
                       if (result.total == markerMovingControl.getPageNum()) {
                           markerMovingControl.setIsEnd(true);
                       }
                       //加载完毕移除
                       $("#iCenter").removeClass("csspinner ringed");
                       continueAnimation();
                   }

               });
        }
        var EARTH_RADIUS = 6378137.0;    //单位M
        var PI = Math.PI;
        function getRad(d) {
            return d * PI / 180.0;
        }
        /**
     * approx distance between two points on earth ellipsoid
     * param {Object} lat1
     * param {Object} lng1
     * param {Object} lat2
     * param {Object} lng2
     */
        function getFlatternDistance(lat1, lng1, lat2, lng2) {
            var f = getRad((lat1 + lat2) / 2);
            var g = getRad((lat1 - lat2) / 2);
            var l = getRad((lng1 - lng2) / 2);

            var sg = Math.sin(g);
            var sl = Math.sin(l);
            var sf = Math.sin(f);

            var s, c, w, r, d, h1, h2;
            var a = EARTH_RADIUS;
            var fl = 1 / 298.257;

            sg = sg * sg;
            sl = sl * sl;
            sf = sf * sf;

            s = sg * (1 - sl) + (1 - sf) * sl;
            c = (1 - sg) * (1 - sl) + sf * sl;

            w = Math.atan(Math.sqrt(s / c));
            r = Math.sqrt(s * c) / w;
            d = 2 * w * a;
            h1 = (3 * r - 1) / 2 / c;
            h2 = (3 * r + 1) / 2 / s;

            return d * (1 + fl * (h1 * sf * (1 - sg) - h2 * (1 - sf) * sg));
        }
    </script>
}