

<div style="padding:2px 0px 0px 5px;font-size:12px">
    <input type="button" value="从头开始动画" onclick="startAnimation()" style="margin-left:5px;" />
    <input type="button" value="暂停" onclick="pauseAnimation()" style="margin-left:5px;" />
    <input type="button" value="继续" onclick="continueAnimation()" style="margin-left:5px;" />
    <input type="button" value="加载数据" onclick="load()" style="margin-left:5px;" />
</div>
<div id="iCenter" style="width:600px; height:500px;"></div>
<script src="~/Scripts/jquery-2.1.1.min.js"></script>
<script language="javascript" src="http://webapi.amap.com/maps?v=1.2&key=990f8ec17963b0c7a507f9c74d275568"></script>
<script language="javascript">
    var mapObj, marker, markerMovingControl;
    var lngX = 116.373881;
    var latY = 39.907409;
    $(document).ready(function () {
        mapInit();
    });
    //初始化地图对象，加载地图
    function mapInit() {
        mapObj = new AMap.Map("iCenter", {
            //二维地图显示视口
            //view: new AMap.View2D({
            //    center: new AMap.LngLat(lngX, latY)//,//地图中心点
            //    // zoom: 8 //地图显示的缩放级别
            //}),
            //continuousZoomEnable: false
        });
        marker = new AMap.Marker({
            map: mapObj,
            //draggable:true, //是否可拖动
            position: new AMap.LngLat(116.397428, 39.90923),//基点位置
            icon: "http://code.mapabc.com/images/car_03.png", //marker图标，直接传递地址url
            offset: new AMap.Pixel(-26, -13), //相对于基点的位置
            //是否自动旋转。点标记在使用moveAlong动画时，路径方向若有变化，点标记是否自动调整角度，默认为false
            autoRotation: true
        });
        //  AMap.event.addListener(mapObj, "complete", completeEventHandler);
    }
    /**     第一部分，动画暂停、继续的实现     */

    /**
   * Marker移动控件
   * param {Map} map    地图对象
   * param {Marker} marker Marker对象
   * param {Array} path   移动的路径，以坐标数组表示
   */
    var MarkerMovingControl = function (map, marker, path) {
        this._map = map;
        this._marker = marker;
        this._path = path;
        this._currentIndex = 0;
        this._speed = 2000;
        //为Marker指定目标显示地图。当参数值取null时，地图上移除当前Marker：setMap(null)
        marker.setMap(map);
        marker.setPosition(path[0]);
    }

    /**
     * 移动marker，会从当前位置开始向前移动
     */
    MarkerMovingControl.prototype.move = function () {
        if (!this._listenToStepend) {
            this._listenToStepend = AMap.event.addListener(this, 'stepend', function () {
                this.step();
            }, this);
        }
        this.step();
    };

    /**
     * 停止移动marker，由于控件会记录当前位置，所以相当于暂停
     */
    MarkerMovingControl.prototype.stop = function () {
        this._marker.stopMove();
    };

    /**
     * 重新开始，会把marker移动到路径的起点然后开始移动
     */
    MarkerMovingControl.prototype.restart = function () {
        this.stop();
        this._marker.setPosition(this._path[0]);
        this._currentIndex = 0;
        this.move();
    };

    /**
     * 向前移动一步
     */
    MarkerMovingControl.prototype.step = function () {
        var nextIndex = this._currentIndex + 1;
        if (nextIndex < this._path.length) {
            if (!this._listenToMoveend) {
                this._listenToMoveend = AMap.event.addListener(this._marker, 'moveend', function () {
                    this._currentIndex++;
                    AMap.event.trigger(this, 'stepend');
                }, this);
            }
            // console.log(nextIndex);
            this._marker.moveTo(this._path[nextIndex], this._speed);
        }
    };

    /**     第二部分，应用示例     */

    // 编写事件响应函数
    function startAnimation() {
        markerMovingControl.restart();
    }

    function pauseAnimation() {
        markerMovingControl.stop();
    }

    function continueAnimation() {
        markerMovingControl.move();
    }
    function load() {
        // 创建移动控件
        var lineArr = [];
        lineArr.push(new AMap.LngLat(lngX, latY));
        for (var i = 1; i < 50; i++) {
            lngX = lngX + Math.random() * 0.05;
            if (i % 2) {
                latY = latY + Math.random() * 0.0001;
            } else {
                latY = latY + Math.random() * 0.06;
            }
            lineArr.push(new AMap.LngLat(lngX, latY));
        }
        var polyline = new AMap.Polyline({
            map: mapObj,
            path: lineArr,
            strokeColor: "#F00", //线颜色
            strokeOpacity: 0.4, //线透明度
            strokeWeight: 3, //线宽
            strokeStyle: "dashed", //线样式
            strokeDasharray: [10, 5] //补充线样式
        });
        //根据地图上添加的覆盖物分布情况，缩放平移地图到合适的视野级别，参数overlayList默认为当前地图上添加的所有覆盖物图层
        mapObj.setFitView();
        markerMovingControl = new MarkerMovingControl(mapObj, marker, lineArr);

    }

</script>




